
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackContext
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackContext, CallbackQueryHandler
import os
import asyncio

'''                                       –ù–ê–ß–ê–õ–û –ö–û–î–ê                                        '''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db(user_id):
    db_name = 'polyglotik.db'  # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect(db_name)
    c = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥—Ä—É–ø–ø, —Å–ª–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    c.execute('''CREATE TABLE IF NOT EXISTS Users (
        id INTEGER PRIMARY KEY AUTOINCREMENT, 
        user_id INTEGER UNIQUE, 
        username TEXT
        )''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS Groups (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        user_id INTEGER,
        FOREIGN KEY(user_id) REFERENCES Users(user_id)
    )''')

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Words
    c.execute('''CREATE TABLE IF NOT EXISTS Words (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        group_id INTEGER,
        foreign_word TEXT,
        russian_word TEXT,
        user_id INTEGER,
        FOREIGN KEY(group_id) REFERENCES Groups(id),
        FOREIGN KEY(user_id) REFERENCES Users(user_id)
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS Settings (
        id INTEGER PRIMARY KEY AUTOINCREMENT, 
        user_id INTEGER, 
        language TEXT, 
        FOREIGN KEY(user_id) REFERENCES Users(user_id))''')

    conn.commit()
    conn.close()


def get_user_db(user_id):
    db_name = 'polyglotik.db'
    return sqlite3.connect(db_name)

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = update.message.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    init_db(user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    conn = get_user_db(user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ get_user_db
    c = conn.cursor()
    c.execute("SELECT id FROM Users WHERE user_id = ?", (user_id,))
    user = c.fetchone()

    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        c.execute("INSERT INTO Users (user_id, username) VALUES (?, ?)", (user_id, username))
        conn.commit()

    conn.close()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞‚ûï"), KeyboardButton("–ü–æ–∏–≥—Ä–∞–µ–ºüß©"), KeyboardButton("–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤üìã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–æ–ª–∏–≥–ª–æ—Ç–∏–∫ üìö –ß–µ–º –∑–∞–π–º–µ–º—Å—è?", reply_markup=reply_markup)

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫"""
    json_str = request.get_data(as_text=True)
    update = Update.de_json(json_str, application.bot)
    application.update_queue.put(update)
    return 'ok', 200

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –í –º–µ–Ω—é‚ú®
async def menu(update: Update, context: CallbackContext):
    keyboard = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞‚ûï"), KeyboardButton("–ü–æ–∏–≥—Ä–∞–µ–ºüß©"), KeyboardButton("–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤üìã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é‚ú® –ß–µ–º –∑–∞–π–º–µ–º—Å—è??", reply_markup=reply_markup)

async def return_to_menu(update: Update, context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await menu(update, context)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

'''                                       –î–û–ë–ê–í–ò–¢–¨ –°–õ–û–í–ê                                        '''


ADD_WORDS_GROUP = range(1)

# –≠—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ (–≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã)
async def add_words_group(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    conn = sqlite3.connect('polyglotik.db')
    c = conn.cursor()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute('SELECT name FROM Groups WHERE user_id = ?', (user_id,))
    groups = c.fetchall()
    conn.close()

    if groups:
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
        keyboard = [[KeyboardButton(group[0])] for group in groups]
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –í –º–µ–Ω—é‚ú®
        keyboard.append([KeyboardButton("–í –º–µ–Ω—é‚ú®")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ, *–≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É* –∏–ª–∏ *–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π* —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
            parse_mode="MarkdownV2",
            reply_markup=reply_markup
        )
    else:
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
        keyboard = [[KeyboardButton("–í –º–µ–Ω—é‚ú®")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ *–≥—Ä—É–ø–ø—ã* ü•∫ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã* —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
            parse_mode="MarkdownV2",
            reply_markup=reply_markup
        )

    return 1  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

# –≠—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
async def add_words_foreign(update: Update, context: CallbackContext):
    if update.message.text == "–í –º–µ–Ω—é‚ú®":
        return await return_to_menu(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –í –º–µ–Ω—é‚ú®

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    context.user_data['group'] = update.message.text

    # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é
    keyboard = [[KeyboardButton("–í –º–µ–Ω—é‚ú®")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ *–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º<* —è–∑—ã–∫–µ:", parse_mode="MarkdownV2", reply_markup=reply_markup)
    return 2  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É


# –≠—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
async def add_words_russian(update: Update, context: CallbackContext):
    if update.message.text == "–í –º–µ–Ω—é‚ú®":
        return await return_to_menu(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –í –º–µ–Ω—é‚ú®

    context.user_data['foreign_word'] = update.message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ *–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º*:", parse_mode="MarkdownV2")
    return 3


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def save_word(update: Update, context: CallbackContext):
    if update.message.text == "–í –º–µ–Ω—é‚ú®":
        return await return_to_menu(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –í –º–µ–Ω—é‚ú®

    russian_word = update.message.text
    group = context.user_data['group']
    foreign_word = context.user_data['foreign_word']
    user_id = update.message.from_user.id

    conn = sqlite3.connect('polyglotik.db')
    c = conn.cursor()

    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–æ–≤–∞—è, —Å–æ–∑–¥–∞–µ–º –µ—ë
    c.execute("SELECT id FROM Groups WHERE name = ? AND user_id = ?", (group, user_id))
    group_id = c.fetchone()

    if not group_id:
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–æ–≤–∞—è, —Å–æ–∑–¥–∞—ë–º –µ—ë
        c.execute("INSERT INTO Groups (name, user_id) VALUES (?, ?)", (group, user_id))
        group_id = c.lastrowid
    else:
        group_id = group_id[0]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É
    c.execute(
        "INSERT INTO Words (group_id, foreign_word, russian_word) VALUES (?, ?, ?)",
        (group_id, foreign_word, russian_word)
    )
    
    conn.commit()
    conn.close()

    await update.message.reply_text(f"–°–ª–æ–≤–æ '{foreign_word}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É '{group}' üéâ")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É —ç—Ç–∞–ø—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await add_words_group(update, context)
    return 1


'''                                       –°–ø–∏—Å–æ–∫  –°–õ–û–í –ò –ì–†–£–ü–ü                                        '''


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
from telegram import KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ConversationHandler
import sqlite3

DELETE_ACTION, DELETE_WORD_OR_GROUP, DELETE_WORD, DELETE_GROUP = range(4, 8)

# –≠—Ç–∞–ø –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
async def list_words(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    db_name = 'polyglotik.db'
    
    
    conn = sqlite3.connect(db_name)
    c = conn.cursor()
    c.execute("""
            SELECT g.name, w.foreign_word, w.russian_word
            FROM Groups g
            LEFT JOIN Words w ON g.id = w.group_id
            WHERE g.user_id = ?
        """, (user_id,))
    words = c.fetchall()
    conn.close()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í –º–µ–Ω—é‚ú®"
    if update.message.text == "–í –º–µ–Ω—é‚ú®":
        return await return_to_menu(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –í –º–µ–Ω—é‚ú®

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ
    if words:
        grouped_words = {}

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –≥—Ä—É–ø–ø–µ
        for group, foreign_word, russian_word in words:
            if group not in grouped_words:
                grouped_words[group] = []
            if foreign_word is not None and russian_word is not None:
                grouped_words[group].append(f"{foreign_word} - {russian_word}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤üìã :\n\n"
        for group, word_list in grouped_words.items():
            message += f"–ì–†–£–ü–ü–ê  {group}\n"
            if word_list:
                for word in word_list:
                    message += f"                  {word}\n"
            else:
                message += "                  (–¢—É—Ç –ø—É—Å—Ç–æ)\n"
            message += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —Å–ª–∏–≤–∞–ª–∏—Å—å
        await update.message.reply_text(message)
    
        

        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏, –∫—Ä–æ–º–µ "–í –º–µ–Ω—é‚ú®" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = [
            [KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–ª–∏ –≥—Ä—É–ø–ø—É")],
            [KeyboardButton("–í –º–µ–Ω—é‚ú®")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫?", reply_markup=reply_markup)

        return DELETE_ACTION  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–≤ –≤ –±–∞–∑–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞‚ûï —Å–ª–æ–≤–æ
    keyboard = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ‚ûï")],
        [KeyboardButton("–í –º–µ–Ω—é‚ú®")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
    "–ù–µ –Ω–∞—à–µ–ª —Å–ª–æ–≤ –≤ –í–∞—à–µ–π –±–∞–∑–µ ü•∫ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞?",
    reply_markup=reply_markup
)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞‚ûï —Å–ª–æ–≤–æ"
    return ADD_WORDS_GROUP

"---------------------"
async def delete_word_or_group(update: Update, context: CallbackContext):
    if update.message.text == "–í –º–µ–Ω—é‚ú®":
        return await return_to_menu(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –í –º–µ–Ω—é‚ú®
    if update.message.text == "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–ª–∏ –≥—Ä—É–ø–ø—É":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard = [
            [KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")],
            [KeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")],
            [KeyboardButton("–í –º–µ–Ω—é‚ú®")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?:", reply_markup=reply_markup)
        return DELETE_WORD_OR_GROUP  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É


"""------------------------"""
async def delete_word(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    db_name = 'polyglotik.db'
    
    
    conn = sqlite3.connect(db_name)
    c = conn.cursor()
    c.execute("""
        SELECT g.name, w.id, w.foreign_word, w.russian_word
        FROM Words w
        JOIN Groups g ON w.group_id = g.id
        WHERE g.user_id = ?
    """, (user_id,))
    words = c.fetchall()
    conn.close()

    if words:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –≥—Ä—É–ø–ø–µ
        grouped_words = {}
        for group, word_id, foreign_word, russian_word in words:
            if group not in grouped_words:
                grouped_words[group] = []
            grouped_words[group].append((word_id, foreign_word, russian_word))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        message = "–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:\n \n"
        idx = 1
        context.user_data['delete_words'] = []  # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤üìã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è id —Å–ª–æ–≤
        for group, word_list in grouped_words.items():
            message += f"–ì–†–£–ü–ü–ê  {group}\n"
            for word_id, foreign_word, russian_word in word_list:
                message += f"                  {idx}. {foreign_word} - {russian_word}\n"
                context.user_data['delete_words'].append(word_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–ª–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                idx += 1
                                                

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –í –º–µ–Ω—é‚ú®
        keyboard = [[KeyboardButton("–í –º–µ–Ω—é‚ú®")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–í –º–µ–Ω—é‚ú®"
        await update.message.reply_text(message, reply_markup=reply_markup)
        return DELETE_WORD
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await update.message.reply_text("–ù–µ –Ω–∞—à–µ–ª —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ü•∫", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

async def confirm_delete_word(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    db_name = 'polyglotik.db'

    try:
        selected_idx = int(update.message.text) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω–¥–µ–∫—Å
        if selected_idx < 0 or selected_idx >= len(context.user_data['delete_words']):
            raise IndexError

        word_id = context.user_data['delete_words'][selected_idx]

        # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(db_name)
        c = conn.cursor()
        c.execute("DELETE FROM Words WHERE id = ?", (word_id,))
        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ
        await update.message.reply_text("–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ üéâ")

        # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤üìã —Å–ª–æ–≤
        return await list_words(update, context)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤

    except (ValueError, IndexError):
        await update.message.reply_text("–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ü•∫ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞.")
        return DELETE_WORD

"""------------------------------"""
async def delete_group(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    db_name = 'polyglotik.db'
    
    if update.message.text == "–í –º–µ–Ω—é‚ú®":
        return await return_to_menu(update, context)
    
    conn = sqlite3.connect(db_name)
    c = conn.cursor()
    c.execute(f'SELECT id, name FROM Groups WHERE user_id = ?', (user_id,))  # –ü–æ–ª—É—á–∞–µ–º id –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø
    groups = c.fetchall()
    conn.close()

    if groups:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
        keyboard = [[KeyboardButton(group_name)] for _, group_name in groups]
        keyboard.append([KeyboardButton("–í –º–µ–Ω—é‚ú®")])  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –í –º–µ–Ω—é‚ú®

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ö–∞–∫—É—é –≥—Ä—É–ø–ø—É –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å?", reply_markup=reply_markup)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤üìã –≥—Ä—É–ø–ø –≤ context –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['delete_groups'] = {group_name: group_id for group_id, group_name in groups}
        return DELETE_GROUP
    else:
        await update.message.reply_text("–ù–µ –Ω–∞—à–µ–ª –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ü•∫")
        return ConversationHandler.END

async def confirm_delete_group(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    db_name = 'polyglotik.db'

    selected_group = update.message.text  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    if selected_group == "–í –º–µ–Ω—é‚ú®":
        await menu(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return ConversationHandler.END

    group_map = context.user_data.get('delete_groups', {})
    group_id = group_map.get(selected_group)

    if not group_id:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return DELETE_GROUP

    # –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –µ—ë —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_name)
    c = conn.cursor()
    c.execute("DELETE FROM Words WHERE group_id = ?", (group_id,))
    c.execute("DELETE FROM Groups WHERE id = ?", (group_id,))
    conn.commit()
    conn.close()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ '{selected_group}' –∏ –≤—Å–µ –µ—ë —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

    return await list_words(update, context)
  
'''-----------------'''


# –û—Ç–º–µ–Ω–∞ –∏ –≤—ã—Ö–æ–¥ –í –º–µ–Ω—é‚ú®
async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return await return_to_menu(update, context)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
async def delete_all(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    db_name = 'polyglotik.db'
    
    
    conn = sqlite3.connect(db_name)
    c = conn.cursor()

    # –£–¥–∞–ª—è–µ–º –£—á–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞
    c.execute("DELETE FROM Words")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
    c.execute("DELETE FROM Groups")
    conn.commit()
    conn.close()

    await update.message.reply_text("–í—Å–µ –≥—Ä—É–ø–ø—ã –∏ –∏—Ö —Å–ª–æ–≤–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")


from telegram import KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ConversationHandler
import random
'''--------------------'''

'''                                       –ü–æ–∏–≥—Ä–∞–µ–ºüß© –°–õ–û–í–ê                                        '''

# –ù–æ–≤—ã–µ —Å—Ç–∞–¥–∏–∏ –¥–ª—è –∏–≥—Ä—ã
import random

GAME_START, GAME_QUESTION, GAME_CHECK_ANSWER, GAME_END = range(1, 5)

# –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –≤—Å–µ—Ö —Å–ª–æ–≤
async def play(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    db_name = 'polyglotik.db'
    
    conn = sqlite3.connect(db_name)
    c = conn.cursor()
   
    keyboard = [
        [KeyboardButton("–£—á–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞"), KeyboardButton("–£—á–∏—Ç—å —Å–ª–æ–≤–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º")],
        [KeyboardButton("–í –º–µ–Ω—é‚ú®")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É üß© \n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–≤ –∏–ª–∏ —Å–ª–æ–≤ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã. \n–û—Ç–≤–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–µ—à—å üòà",
        reply_markup=reply_markup
    )
    return GAME_START

# –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
async def select_group_or_all(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    db_name = 'polyglotik.db'

    if update.message.text == "–í –º–µ–Ω—é‚ú®":
        return await return_to_menu(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –í –º–µ–Ω—é‚ú®

    if update.message.text == "–£—á–∏—Ç—å —Å–ª–æ–≤–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º":
        # –ü–æ–ª—É—á–∞–µ–º –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤üìã –≥—Ä—É–ø–ø
        conn = sqlite3.connect(db_name)
        c = conn.cursor()
        c.execute("SELECT name FROM Groups WHERE user_id = ?", (user_id,))
        groups = c.fetchall()
        conn.close()

        

        if groups:
            keyboard = [[KeyboardButton(group[0])] for group in groups]
            keyboard.append([KeyboardButton("–í –º–µ–Ω—é‚ú®")])  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –í –º–µ–Ω—é‚ú®
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–ö–∞–∫—É—é –≥—Ä—É–ø–ø—É –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –∏–≥—Ä—ã?",
                reply_markup=reply_markup
            )
            return GAME_START
        else:
            await update.message.reply_text("–Ø –Ω–µ –Ω–∞—à–µ–ª —É –í–∞—Å –≥—Ä—É–ø–ø ü•∫ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é")
            return ConversationHandler.END

    elif update.message.text == "–£—á–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞":
        # –ü–æ–ª—É—á–∞–µ–º –£—á–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–≥—Ä—ã
        conn = sqlite3.connect(db_name)
        c = conn.cursor()
        c.execute("""
            SELECT foreign_word, russian_word 
            FROM Words 
            JOIN Groups ON Words.group_id = Groups.id 
            WHERE Groups.user_id = ?
        """, (user_id,))
        words = c.fetchall()
        conn.close()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
        if words:
            random.shuffle(words)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
            context.user_data['game_words'] = words
            context.user_data['used_words'] = set()  # –°–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ
            context.user_data['current_word_index'] = 0
            context.user_data['used_questions'] = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞—Ä —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥
            await ask_question(update, context)
            return GAME_QUESTION
        else:
            await update.message.reply_text("–Ø –Ω–µ –Ω–∞—à–µ–ª —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã ü•∫ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é")
            return ConversationHandler.END

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞
    else:
        group_name = update.message.text
        conn = sqlite3.connect(db_name)
        c = conn.cursor()
        c.execute("""
            SELECT foreign_word, russian_word 
            FROM Words 
            JOIN Groups ON Words.group_id = Groups.id 
            WHERE Groups.name = ? AND Groups.user_id = ?
        """, (group_name, user_id))
        words = c.fetchall()
        conn.close()

        if words:
            random.shuffle(words)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
            context.user_data['game_words'] = words
            context.user_data['used_words'] = set()  # –°–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ
            context.user_data['current_word_index'] = 0
            context.user_data['used_questions'] = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞—Ä —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥
            await ask_question(update, context)
            return GAME_QUESTION
        else:
            await update.message.reply_text(f"–Ø –Ω–µ –Ω–∞—à–µ–ª —Å–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–µ '{group_name}' ü•∫")
            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ select_group_or_all –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard = [
                [KeyboardButton("–£—á–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞"), KeyboardButton("–£—á–∏—Ç—å —Å–ª–æ–≤–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º")],
                [KeyboardButton("–í –º–µ–Ω—é‚ú®")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–ö–∞–∫—É—é –≥—Ä—É–ø–ø—É –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –∏–≥—Ä—ã?",
                reply_markup=reply_markup
            )
            return GAME_START

# –≠—Ç–∞–ø –∏–≥—Ä—ã (–∑–∞–¥–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å)
async def ask_question(update: Update, context: CallbackContext):
    if update.message.text == "–í –º–µ–Ω—é‚ú®":
        return await return_to_menu(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    words = context.user_data.get('game_words', [])
    question_queue = context.user_data.get('question_queue', [])
    
    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞, —Å–æ–∑–¥–∞–µ–º –µ–µ
    if not question_queue:
        # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for word_pair in words:
            question_queue.append((word_pair[0], word_pair[1], "foreign_to_russian"))  # –° –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            question_queue.append((word_pair[1], word_pair[0], "russian_to_foreign"))  # –° —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π
        random.shuffle(question_queue)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã

    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    if not question_queue:
        
        await update.message.reply_text("–£–ø—Å. –ö–∞–∂–µ—Ç—Å—è, —Å–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ")
        sticker = "CAACAgIAAxkBAAELQFBncC1h6OjAnenr-yZj1HqW0RHxmAACVioAAoFtsEnew0qW1q4NCTYE"
        await update.message.reply_sticker(sticker)
        return GAME_END

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    question, correct_answer, question_type = question_queue.pop(0)
    context.user_data['question_queue'] = question_queue  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
    context.user_data['correct_answer'] = correct_answer  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if question_type == "foreign_to_russian":
        await update.message.reply_text(f"–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ - {question} ?")
    else:
        await update.message.reply_text(f"–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ - {question} ?")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = [[KeyboardButton("–í –º–µ–Ω—é‚ú®")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –æ—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", reply_markup=reply_markup)

    return GAME_CHECK_ANSWER


# –≠—Ç–∞–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
async def check_answer(update: Update, context: CallbackContext):
    if update.message.text == "–í –º–µ–Ω—é‚ú®":
        return await return_to_menu(update, context)

    correct_answer = context.user_data['correct_answer']
    user_answer = update.message.text.strip().lower()

    if 'incorrect_attempts' not in context.user_data:
        context.user_data['incorrect_attempts'] = 0

    if user_answer == correct_answer.lower():
        context.user_data['incorrect_attempts'] = 0
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚úÖ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤
        if len(context.user_data['question_queue']) == 0:
            await update.message.reply_text("–£–ø—Å. –ö–∞–∂–µ—Ç—Å—è, —Å–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n         –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ")
            sticker = "CAACAgIAAxkBAAELQFBncC1h6OjAnenr-yZj1HqW0RHxmAACVioAAoFtsEnew0qW1q4NCTYE"  # –ü—Ä–∏–º–µ—Ä —Å—Ç–∏–∫–µ—Ä–∞
            await update.message.reply_sticker(sticker)
            return await play(update, context)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        return await ask_question(update, context)
    else:
        context.user_data['incorrect_attempts'] += 1
        remaining_attempts = 3 - context.user_data['incorrect_attempts']

        if context.user_data['incorrect_attempts'] >= 3:
            await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - {correct_answer}. ")
            return await game_end(update, context)
        else:
            await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}")
            return GAME_CHECK_ANSWER



    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
    return await ask_question(update, context)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
async def game_end(update: Update, context: CallbackContext):
    if update.message.text == "–í –º–µ–Ω—é‚ú®":
        return await play(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –í –º–µ–Ω—é‚ú®

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä (–∑–∞–º–µ–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∏–∫–µ—Ä –Ω–∞ –≤–∞—à—É)
    sticker = "CAACAgIAAxkBAAELQExncCyUMaxoz_1Tc6yhwaijmY_7xgACgSwAArMIIEvBatc5UbVj1DYE"  # –ü—Ä–∏–º–µ—Ä —Å—Ç–∏–∫–µ—Ä–∞
    await update.message.reply_sticker(sticker)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –í –º–µ–Ω—é‚ú®
    return await play(update, context)


"""------------------------------------------------"""

import os
from telegram.ext import CallbackQueryHandler
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –¥–ª—è –±–æ—Ç–∞
def main():
    
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    application = Application.builder().token(token).build()

    play_conversation = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–ü–æ–∏–≥—Ä–∞–µ–ºüß©$'), play)],
        states={
            GAME_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_group_or_all)],
            GAME_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer)],
            GAME_CHECK_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer)],
            GAME_END: [MessageHandler(filters.TEXT & ~filters.COMMAND, game_end)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(play_conversation)
    
    
    # –ö–æ–º–∞–Ω–¥–∞ /start
    application.add_handler(CommandHandler("start", start))

    application.add_handler(CommandHandler("delete_all", delete_all))

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤
    add_word_conversation = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex('^–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ‚ûï$'), add_words_group),  # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞‚ûï —Å–ª–æ–≤–æ"
        MessageHandler(filters.Regex('^–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞‚ûï$'), add_words_group),  # –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    ],
    states={
        1: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_words_foreign)],
        2: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_words_russian)],
        3: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_word)],
    },
    fallbacks=[MessageHandler(filters.Regex('^–í –º–µ–Ω—é‚ú®$'), return_to_menu)],
)


    application.add_handler(add_word_conversation)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
    
    conversation_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤üìã$'), list_words)],
        states={
            DELETE_ACTION: [MessageHandler(filters.TEXT, delete_word_or_group)],
            DELETE_WORD_OR_GROUP: [
               MessageHandler(filters.Regex('^–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ$'), delete_word),
               MessageHandler(filters.Regex('^–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É$'), delete_group),
            ],
            DELETE_WORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_delete_word)],
            DELETE_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_delete_group)],
            ADD_WORDS_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_words_group)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )  
    application.add_handler(conversation_handler)
    
    application.add_handler(CallbackQueryHandler(confirm_delete_group))


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Regex('^–í –º–µ–Ω—é‚ú®$'), menu))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é

    application.run_polling()
      
if __name__ == '__main__':
    main()
